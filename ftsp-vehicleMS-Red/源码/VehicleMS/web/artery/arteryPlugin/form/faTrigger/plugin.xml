<?xml version="1.0" encoding="utf-8"?>
<Item type="faTrigger" cn="trigger控件" menu="输入控件" nameprop="label"
	icon="faTrigger.gif" iconNew="faTriggerNew.gif">
	<Info>
		<Author>Artery开发小组</Author>
		<CreateTime>2008-08-05</CreateTime>
		<Describe><![CDATA[
			<p>trigger控件，在输入框右侧，带清空按钮和trigger按钮的控件</p>
			<p>用户可以通过“点击时脚本”，定制trigger按钮点击时的事件</p>
		]]></Describe>
		<Images>
			<File>info.gif</File>
		</Images>
	</Info>
	<Parents>
		<Parent type="formArea" />
		<Parent type="faFieldSet" />
		<Parent type="faBlankLayout" />
	</Parents>
	<Children />
	<Class>com.thunisoft.artery.plugin.form.FaCustTrigger
	</Class>
	<JsFile>
		<File>faTrigger.js</File>
	</JsFile>
	<Properties>
		<Property cn="组件类型" type="1" name="xtype" isHidden="1"
			export="true" cfg="true">
			<Value>apFaTrigger</Value>
		</Property>
		<Property cn="标识" type="1" name="id" export="true"
			tips="在同一表单中唯一标识一个表单对象，不可重复，默认由系统自动生成uuid。可更改，便于在脚本中通过Aty.get('id')进行调用。">
			<Value />
		</Property>
				<Property cn="控件提示" type="1" name="comment" tips="用于产生控件的提示信息">
			<Value />
			<Description><![CDATA[
			用于产生控件的提示信息,如果控件指定了继承表，继承字段，此项默认会显示数据字典中相应字段的描述信息。
			如果填写此属性，则会覆盖数据字典中的描述信息。
			]]></Description>
		</Property>
		<Property cn="提交名称" type="1" name="submitName"
			tips="用于设置form提交时本控件的提交名称，也就是input标签的name属性">
			<Value />
		</Property>
		<Property cn="是否必填" type="11" name="required" tips="定义是否是必填项">
			<Value>false</Value>
		</Property>
		<Property cn="display必填标识" type="11" name="displayRequiredStyle" tips="当运行时类型为display时是否应用label的必填样式，默认为false">
			<Value>false</Value>
		</Property>
		<Property cn="只读时是否验证" type="11" name="validOnReadOnly" export="true" tips="当设置为true时，调用表单的submit方法时 会对展现类型（displayType）属性为ReadOnly的控件进行验证，默认为false">
			<Value>false</Value>
		</Property>
		<Property cn="无效时是否提交" type="3" name="submitDisabled" ct="[inherit,true,false]"
			 tips="设置表单提交的时候，当displayType属性为disabled时是否提交，默认为inherit">
			<Value>inherit</Value>
		</Property>
		<Property cn="客户端" group="点击时脚本" type="15" name="onTriggerClickClient"
			tips="当点击控件的trigger按钮时触发的客户端事件">
			<Value />
			<Description><![CDATA[
				<p>当点击控件的trigger按钮时触发的客户端事件</p>
<pre>
/**
 * 点击时脚本(faTrigger32cc0)
 * 
 * @param  rc 系统提供的AJAX调用对象
 */
function faTrigger32cc0_onTriggerClickClient (rc){
	rc.put('key','value');//增加一个参数
	//发送请求，在回调函数中处理返回结果
	rc.send(function(result){
		Artery.get("faTrigger32cc0").setValue(result, result);
	});
}
</pre>
			]]></Description>
		</Property>
		<Property cn="服务器端" group="点击时脚本" type="14" name="onTriggerClickServer"
			tips="当点击控件的trigger按钮时触发的服务端事件">
			<Value />
			<Description><![CDATA[
				<p>当点击控件的trigger按钮时触发的服务端事件</p>
<pre>
	/**
	 * 点击时脚本
	 * 
	 * @param item
	 *            控件对象
	 */
	public Object faTrigger32cc0_onTriggerClickServer(Item item) {
		String key = ParamUtil.getString("key");
		System.out.println(key);
		return key + "_Server";
	}
</pre>
			]]></Description>
		</Property>
        <Property cn="继承key" type="1" name="inheritkey"
            tips="继承的数据字典的key，如果填写，则会根据此属性找到对应的数据字典来进行解析">
            <Value />
        </Property>
		<Property cn="继承表" type="1" name="inherittbl"
			tips="继承的数据字典的表名，如果填写，则会根据此属性找到对应的数据字典来进行解析">
			<Value />
		</Property>
		<Property cn="继承字段" type="1" name="inheritfld"
			tips="继承的数据字典的字段名，如果填写，则会根据此属性找到对应的数据字典来进行解析">
			<Value />
		</Property>
		<Property cn="数据源" type="1" name="dataName"
			tips="对应着从数据源中取数据。可写数据源标签。示例：{rs1.C_NAME}">
			<Value />
		</Property>
		<Property cn="宽度" type="1" name="width" mask="^\d{1,}%{0,1}$"
			et="正确输入为：n%或n" tips="设置本组件的宽度，可输入数值或百分比">
			<Value>100%</Value>
    </Property>
    <Property cn="高度" type="1" name="height"  mask="^\d{1,}%{0,1}$" et="正确输入为：n%或n" tips="设置本组件的高度，可输入数值或百分比">
      <Value />
    </Property>
    <Property cn="是否显示清空按钮" type="11" name="showClear" export="true"
		tips="设置是否显示控件的清空按钮">
		<Value>true</Value>
	</Property>
    <Property cn="是否可输入" type="11" name="editable" export="true" tips="当此属性为false时，选择框不能输入，只能进行选择操作，反之可输入">
      <Value>false</Value>
    </Property>
	<Property cn="输入最大长度" type="1" name="maxLength" mask="^\d{1,}$" tips="限制控件可输入的最大长度，仅当“是否可输入（editable）”属性为true时有效">
		<Value />
	</Property>
    <Property cn="值" type="1" name="value" tips="设置本控件的值">
      <Value />
    </Property>
    <Property cn="显示值提示" type="11" name="showValueTip" export="true"  tips="鼠标移动到控件上，显示控件的值...">
      <Value>false</Value>
    </Property>
    <Property cn="输入提示" type="1" name="emptyText" export="true" tips="设置本控件的输入提示值，相当于ext的emptyText属性">
      <Value />
    </Property>
    <Property cn="显示值生成脚本" type="14" name="showValueScript" tips="用于生成控件的显示值">
      <Value />
	<Description><![CDATA[
		<p>用于生成控件的显示值，方法的返回值即为控件的显示值</p>
		<p>当控件的值和显示值不同时，可通过此方法，根据控件的值，设置控件的显示值</p>
<pre>
	/**
	 * 显示值生成脚本
	 * 
	 * @param item
	 *            控件对象
	 */
	public String faTrigger32cc0_showValueScript(Item item) {
		return item.get("value") + "_showValueScript";
	}
</pre>
		]]></Description>
    </Property>
    <Property cn="选择框样式" type="1" name="valueStyle" export="true" tips="设置选择框的样式">
      <Value />
    </Property>
    <Property cn="选择框样式(只读)" type="1" name="valueStyleRead" export="true" tips="设置选择框(只读)的样式">
      <Value />
    </Property>
    <Property cn="验证提示方式" type="3" name="validType" ct="[cooltip,title]" tips="设置验证的提示方式，默认为tip提示的方式，选择title则以html的title样式展现">
      <Value>cooltip</Value>
    </Property>
    <Property cn="展现类型" type="3" name="displayType" ct="[inherit,editable,readOnly,display,disabled]" export="true" tips="当设置此属性为true时，整个表单组件都会为只读的">
      <Value>inherit</Value>
    </Property>
    <Property cn="是否隐藏" type="11" name="hidden"  tips="当为true是为隐藏组件，组件还是生成了，可以用组件对应的show()方法来显示组件，要注意与show属性的区别">
      <Value>false</Value>
    </Property>
    <Property cn="隐藏方式" type="3" name="hideMode" ct="[display,visibility]" tips="设置组件的隐藏方式，相当于css的样式，可选display和visibility">
      <Value>display</Value>
    </Property>
    <Property cn="客户端" type="15" group="值改变时脚本" name="onChangeClient" tips="当本组件的值改变时触发的事件，客户端脚本">
      <Value />
    </Property>
    <Property cn="服务器端" type="14" group="值改变时脚本" name="onChangeServer" tips="当本组件的值改变时触发的事件，服务器端脚本">
      <Value />
    </Property>
    <Property cn="客户端" type="15" group="验证脚本" name="onValidClient" tips="表单控件的验证事件(客户端)，可在此事件中对表单中的控件进行自定义的验证，本验证可实现实时验证">
      <Value />
    </Property>
    <Property cn="服务器端" type="14" group="验证脚本" name="onValidServer" tips="表单控件的验证事件(服务器端)，可在此事件中对表单中的控件进行自定义的验证，本验证可实现实时验证">
      <Value />
    </Property>
    <Property cn="是否生成" type="11" name="show"  tips="当为false时在页面不会生成本组件，即本组件不存在，而不是隐藏本组件，注意与hidden属性的区别">
      <Value>true</Value>
    </Property>
	<Property cn="生成时权限" type="1"  name="showRight"
		tips="设置后，拥有设置的权限才会生成控件">
		<Value />
	</Property>
    <Property cn="生成时脚本" type="14" name="onShow"  tips="可写服务器端脚本，每个组件都会有此属性，会在系统解析此组件时执行此脚本">
      <Value />
    </Property>
  </Properties>
    <Methods>
  	<Method name="getValue" return="string" tips="得到控件的值">
  	</Method>
  	<Method name="getValueText" return="string" tips="得到控件的显示值">
  	</Method>
    <Method name="setValue" inherit="false" return="void" tips="设置控件的值">
      <Description><![CDATA[设置控件的值<pre>
// 设置隐藏值
Artery.get("id").setValue("abc");
// 同时设置隐藏值和显示值
Artery.get("id").setValue("abc","显示值");
</pre>]]></Description>
      <Parameters>
        <Param>value:string 隐藏值</Param>
        <Param>valueText:string 显示值，可选参数</Param>
      </Parameters>
      <Return>void</Return>
    </Method>
    <Method name="setValueText" inherit="false" return="void" tips="设置控件的显示值">
      <Description><![CDATA[设置控件的显示值<pre>
// 设置显示值
Artery.get("id").setValueText("abc");
</pre>]]></Description>
      <Parameters>
        <Param>无</Param>
      </Parameters>
      <Return>void</Return>
    </Method>
    <Method name="reset" return="void" tips="恢复控件的初始值">
    </Method>
    <Method name="setOriginalValue" inherit="false" return="void" tips="设置控件的初始值">
      <Description><![CDATA[设置控件的初始值，通过此方法可动态的改变控件的初始值，当调用reset方法时会恢复到此方法设置的值
<pre>
    // 设置控件初始值
    Artery.get("faTriggerId").setOriginalValue("1");
    
    //设置控件初始值和初始显示值
    Artery.get("faTriggerId").setOriginalValue("1","abc");
</pre>
     ]]></Description>
      <Parameters>
        <Param>value:string 初始值</Param>
        <Param>valueText:string 初始显示值，可选参数</Param>
      </Parameters>
      <Return>void</Return>
  	</Method>
  	<Method name="setOriginalValueText" return="void" tips="设置控件的初始显示值">
      <Description><![CDATA[设置控件的初始显示值，通过此方法可动态的改变控件的初始显示值，当调用reset方法时会恢复到此方法设置的显示值
<pre>
    Artery.get("faTriggerId").setOriginalValue("abc");
</pre>
     ]]></Description>
      <Parameters>
        <Param>valueText:string 显示值</Param>
      </Parameters>
      <Return>void</Return>
  	</Method>
  	<Method name="setLabel" return="void" tips="设置控件的label的显示内容">
  	</Method>
  	<Method name="setLabelColor" return="void" tips="设置控件的label的显示内容的颜色">
  	</Method>
  	<Method name="setLabelStyle" return="void" tips="设置控件的label的样式">
  	</Method>
  	<Method name="setLabelCntStyle" return="void" tips="设置控件的label容器的样式">
  	</Method>
  	<Method name="setValueStyle" return="void" tips="设置控件的内容样式">
  	</Method>
  	<Method name="setRequired" return="void" tips="设置控件是否必填">
  	</Method>
  	<Method name="read" return="void" tips="设置控件为只读">
  	</Method>
  	<Method name="edit" return="void" tips="设置控件为可编辑">
  	</Method>
  	<Method name="disable" return="void" tips="设置控件无效">
  	</Method>
  	<Method name="enable" return="void" tips="设置控件有效">
  	</Method>
  	<Method name="hide" return="void" tips="隐藏本控件">
  	</Method>
  	<Method name="show" return="void" tips="显示本控件">
  	</Method>
  </Methods>
  <JsFunctions>
  	<JsFunction name="onChangeClient">
/**
 * 值改变时脚本({itemid})
 * 
 * @param  rc 系统提供的AJAX调用对象
 * @param  oldValue 控件改变前的旧值
 * @param  newValue 控件改变后的新值
 */
function {methodName} (rc, oldValue, newValue){
	
}
  	</JsFunction>
  	<JsFunction name="onValidClient">
/**
 * 验证脚本({itemid})
 * 
 * @param  rc 系统提供的AJAX调用对象
 * @param  value 控件的值
 */
function {methodName} (rc, value){
	
}
  	</JsFunction>
  	<JsFunction name="onTriggerClickClient">
/**
 * 点击时脚本({itemid})
 * 
 * @param  rc 系统提供的AJAX调用对象
 */
function {methodName} (rc){
	
}
  	</JsFunction>
  </JsFunctions>
  <JavaFunctions>
		<JavaFunction name="showValueScript">
<![CDATA[
/**
 * 显示值生成脚本
 * 
 * @param item
 *            控件对象
 */
public String {methodName}(Item item) {
	return null;
}
]]>
		</JavaFunction>
		<JavaFunction name="onChangeServer">
<![CDATA[
/**
 * 值改变时脚本
 * 
 * @param item
 *            控件对象
 */
public Object {methodName}(Item item) {
	return null;
}
]]>
		</JavaFunction>
		<JavaFunction name="onValidServer">
<![CDATA[
/**
 * 验证时脚本
 * 
 * @param item
 *            控件对象
 */
public Object {methodName}(Item item) {
	return null;
}
]]>
		</JavaFunction>
		<JavaFunction name="onTriggerClickServer">
<![CDATA[
/**
 * 点击时脚本
 * 
 * @param item
 *            控件对象
 */
public Object {methodName}(Item item) {
	return null;
}
]]>
		</JavaFunction>
	</JavaFunctions>
</Item>

