<?xml version="1.0" encoding="utf-8"?>
<Item type="faClassCode" cn="分级代码类型" menu="输入控件" nameprop="label"
	icon="faClassCode.gif" iconNew="faClassCodeNew.gif">
	<Info>
		<Author>Artery开发小组</Author>
		<CreateTime>2008-09-05</CreateTime>
		<Describe>分级代码控件</Describe>
		<Images>
			<File>info2.png</File>
		</Images>
	</Info>
	<Parents>
		<Parent type="formArea" />
		<Parent type="faFieldSet" />
		<Parent type="faBlankLayout" />
	</Parents>
	<Children />
	<Class more="editor">com.thunisoft.artery.plugin.form.FaClassCode
	</Class>
	<JsFile>
		<File>faClassCode.js</File>
		<File>faClassCodePopup.js</File>
	</JsFile>
	<Properties>
		<Property cn="标识" type="1" name="id" export="true"
			tips="在同一表单中唯一标识一个表单对象，不可重复，默认由系统自动生成uuid。可更改，便于在脚本中通过Aty.get('id')进行调用。">
			<Value />
		</Property>
		<Property cn="提交名称" type="1" name="submitName"
			tips="用于设置form提交时本控件的提交名称，也就是input标签的name属性">
			<Value />
		</Property>
				<Property cn="控件提示" type="1" name="comment" tips="用于产生控件的提示信息">
			<Value />
			<Description><![CDATA[
			用于产生控件的提示信息,如果控件指定了继承表，继承字段，此项默认会显示数据字典中相应字段的描述信息。
			如果填写此属性，则会覆盖数据字典中的描述信息。
			]]></Description>
		</Property>
		<Property cn="是否必填" type="11" name="required" tips="是否是必填项">
			<Value>false</Value>
		</Property>
		<Property cn="display必填标识" type="11" name="displayRequiredStyle" tips="当运行时类型为display时是否应用label的必填样式，默认为false">
			<Value>false</Value>
		</Property>
		<Property cn="只读时是否验证" type="11" name="validOnReadOnly" export="true" tips="当设置为true时，调用表单的submit方法时 会对展现类型（displayType）属性为ReadOnly的控件进行验证，默认为false">
			<Value>false</Value>
		</Property>
		<Property cn="无效时是否提交" type="3" name="submitDisabled" ct="[inherit,true,false]"
			 tips="设置表单提交的时候，当displayType属性为disabled时是否提交，默认为inherit">
			<Value>inherit</Value>
		</Property>
        <Property cn="继承key" type="1" name="inheritkey"
            tips="继承的数据字典的key，如果填写，则会根据此属性找到对应的数据字典来进行解析">
            <Value />
        </Property>
		<Property cn="继承表" type="1" name="inherittbl"
			tips="继承的数据字典的表名，如果填写，则会根据此属性找到对应的数据字典来进行解析">
			<Value />
		</Property>
		<Property cn="继承字段" type="1" name="inheritfld"
			tips="继承的数据字典的字段名，如果填写，则会根据此属性找到对应的数据字典来进行解析">
			<Value />
		</Property>
		<Property cn="数据源" type="1" name="dataName" tips="对应着从数据源中取数据">
			<Value />
		</Property>
		<Property cn="控件类型" type="3" name="editor" ct="[sTree,mTree]"
			tips="选择分级代码控件的子类型，可选sTree，mTree">
			<Value>sTree</Value>
		</Property>
		<Property cn="显示方式" type="3" name="showType" ct="[window,popup]"
			tips="用于设置控件显示方式">
			<Value>popup</Value>
			<Description><![CDATA[
         用于设置控件显示方式，比对效果如下：
        <table width=1><tr><td style='text-align:center;font-weight:700'>window效果</td><td style='text-align:center;font-weight:700'>popup效果</td></tr><tr><td><img src='../../resources/images/common/form/faClassCode/faClassCode_pop.png'></td><td><img src='../../resources/images/common/form/faClassCode/faClassCode_win.png'></td></tr></table>]]>
			</Description>
		</Property>
		<Property cn="弹出层最小宽度" type="2" name="minLayerWidth" export="true"
			tips="设置弹出层的最小宽度">
			<Value>150</Value>
		</Property>
		<Property cn="宽度" type="1" name="width" mask="^\d{1,}%{0,1}$"
			et="正确输入为：n%或n" tips="设置本组件的宽度，可输入数值或百分比">
			<Value>100%</Value>
    </Property>
    <Property cn="高度" type="1" name="height"  mask="^\d{1,}%{0,1}$" et="正确输入为：n%或n" tips="设置本组件的高度，可输入数值或百分比">
      <Value />
    </Property>
    <Property cn="弹出层最小高度" type="1" name="minLayerHeight"  mask="^\d{1,}%{0,1}$" et="正确输入为：n" tips="设置本组件的弹出层最小高度，不设置的话默认为0。可输入数值">
      	<Value>300</Value>
    </Property>
    <Property cn="弹出层最大高度" type="1" name="maxLayerHeight"  mask="^\d{1,}%{0,1}$" et="正确输入为：n" tips="设置本组件的弹出层最大高度，若展开的树节点高度大于设置的最大高度，则出现纵向滚动条，不设置的话默认为300。可输入数值">
      	<Value>300</Value>
    </Property>
    <Property cn="是否显示清空按钮" type="11" name="showClear" export="true"
		tips="设置是否显示控件的清空按钮">
		<Value>true</Value>
	</Property>
    <Property cn="代码类型" type="17" name="codeType" ct="classcode" tips="对应系统分级代码维护中的分级代码类型">
      <Value />
    </Property>
    <Property cn="选择类型" type="1" name="selType" tips="1为选择最下级的子类型，2为选择全部">
      <Value>1</Value>
    </Property>
    <Property cn="是否可输入" type="11" name="editable" export="true" tips="当此属性为false时，选择框不能输入，只能进行选择操作，反之可输入">
      <Value>false</Value>
    </Property>
	<Property cn="输入最大长度" type="1" name="maxLength" mask="^\d{1,}$" tips="限制控件可输入的最大长度，仅当“是否可输入（editable）”属性为true时有效">
		<Value />
	</Property>
    <Property cn="值" type="1" name="value" tips="设置本控件的值">
      <Value />
    </Property>
    <Property cn="显示值提示" type="11" name="showValueTip" export="true"  tips="鼠标移动到控件上，显示控件的值...">
      <Value>false</Value>
    </Property>
    <Property cn="输入提示" type="1" name="emptyText" export="true" tips="设置本控件的输入提示值，相当于ext的emptyText属性">
      <Value />
    </Property>
    <Property cn="选择框样式" type="1" name="valueStyle" export="true" tips="设置选择框的样式">
      <Value />
    </Property>
    <Property cn="选择框样式(只读)" type="1" name="valueStyleRead" export="true" tips="设置选择框(只读)的样式">
      <Value />
    </Property>
    <Property cn="验证提示方式" type="3" name="validType" ct="[cooltip,title]" tips="设置验证的提示方式，默认为tip提示的方式，选择title则以html的title样式展现">
      <Value>cooltip</Value>
    </Property>
    <Property cn="展现类型" type="3" name="displayType" ct="[inherit,editable,readOnly,display,disabled]" export="true" tips="当设置此属性为true时，整个表单组件都会为只读的">
      <Value>inherit</Value>
    </Property>
    <Property cn="是否隐藏" type="11" name="hidden"  tips="当为true是为隐藏组件，组件还是生成了，可以用组件对应的show()方法来显示组件，要注意与show属性的区别">
      <Value>false</Value>
    </Property>
    <Property cn="隐藏方式" type="3" name="hideMode" ct="[display,visibility]" tips="设置组件的隐藏方式，相当于css的样式，可选display和visibility">
      <Value>display</Value>
    </Property>
    <Property cn="客户端" type="15" group="值改变时脚本" name="onChangeClient" tips="当本组件的值改变时触发的事件，客户端脚本">
      <Value />
    </Property>
    <Property cn="服务器端" type="14" group="值改变时脚本" name="onChangeServer" tips="当本组件的值改变时触发的事件，服务器端脚本">
      <Value />
    </Property>
    <Property cn="客户端" type="15" group="验证脚本" name="onValidClient" tips="表单控件的验证事件(客户端)，可在此事件中对表单中的控件进行自定义的验证，本验证可实现实时验证">
      <Value />
    </Property>
    <Property cn="服务器端" type="14" group="验证脚本" name="onValidServer" tips="表单控件的验证事件(服务器端)，可在此事件中对表单中的控件进行自定义的验证，本验证可实现实时验证">
      <Value />
    </Property>
    <Property cn="根节点规则" type="14" name="onRootFilter" sh="node,node.code,node.name,node.parent,node.parentCode,node.children" tips="加载分级代码树时，调用此事件确定分级代码树的根节点,可调用：node">
      <Value />
      <Description><![CDATA[
          <p>加载分级代码树时，调用此事件确定分级代码树的根节点,可调用：node</p>
          <p>对于每个分级代码节点都会回调此方法，直到某一节点调用后返回为true，此节点作为根节点</p>
          <pre>
	/**
	 * 根节点规则 此方法用于回调
	 * 
	 * @param item
	 *            控件对象
	 * @param node
	 *            分级代码的节点对象
	 * @return 当返回值为true时，则表明本node节点为根节点
	 */
	public boolean faClassCode2ea48_onRootFilter(Item item, ClassCodeTreeNode node) {
		return true;
	}
          </pre>
      ]]></Description>
      <Conditions>
          <Condition>当某一节点调用此方法返回true之后，其后面的节点将不会再回调此方法</Condition>
      </Conditions>
    </Property>
    <Property cn="过滤规则" type="14" name="onFilter" tips="加载分级代码数据项时进行的过滤规则，输入服务器端脚本，当返回true时过滤，即不加载当前分级代码">
      <Value />
     <Description><![CDATA[
          <p>加载分级代码树时，调用此事件对分级节点进行过滤</p>
          <p>对于每个分级代码节点都会回调此方法，当返回true时过滤，即不加载当前分级代码节点</p>
          <pre>
	/**
	 * 过滤规则 此方法用于回调
	 * 
	 * @param item
	 *            控件对象
	 * @param node
	 *            分级代码的节点对象
	 * @return 当返回值为true时，则表明本node节点会过滤掉
	 */
	public boolean faClassCode2ea48_onFilter(Item item, ClassCodeTreeNode node) {
		return false;
	}
          </pre>
      ]]></Description>
      <Conditions>
          <Condition>当某一节点调用此方法返回true之后，其后面的节点将不会再回调此方法</Condition>
      </Conditions>
    </Property>
    <Property cn="是否生成" type="11" name="show"  tips="当为false时在页面不会生成本组件，即本组件不存在，而不是隐藏本组件，注意与hidden属性的区别">
      <Value>true</Value>
    </Property>
	<Property cn="生成时权限" type="1"  name="showRight"
		tips="设置后，拥有设置的权限才会生成控件">
		<Value />
	</Property>
    <Property cn="生成时脚本" type="14" name="onShow"  tips="可写服务器端脚本，每个组件都会有此属性，会在系统解析此组件时执行此脚本">
      <Value />
    </Property>
  </Properties>
    <Methods>
  	<Method name="getValue"  return="string" tips="得到控件的值">
  	</Method>
  	<Method name="getValueText" return="string" tips="得到控件的显示值">
  	</Method>
  	<Method name="setValue" return="void" tips="设置控件的值">
  	</Method>
  	<Method name="reset" return="void" tips="恢复控件的初始值">
  	</Method>
  	<Method name="setOriginalValue" return="void" tips="设置控件的初始值">
  	</Method>
  	<Method name="setLabel" return="void" tips="设置控件的label的显示内容">
  	</Method>
  	<Method name="setLabelColor" return="void" tips="设置控件的label的显示内容的颜色">
  	</Method>
  	<Method name="setLabelStyle" return="void" tips="设置控件的label的样式">
  	</Method>
  	<Method name="setLabelCntStyle" return="void" tips="设置控件的label容器的样式">
  	</Method>
  	<Method name="setValueStyle" return="void" tips="设置控件的内容样式">
  	</Method>
  	<Method name="setRequired" return="void" tips="设置控件是否必填">
  	</Method>
  	<Method name="read" return="void" tips="设置控件为只读">
  	</Method>
  	<Method name="edit" return="void" tips="设置控件为可编辑">
  	</Method>
  	<Method name="disable" return="void" tips="设置控件无效">
  	</Method>
  	<Method name="enable" return="void" tips="设置控件有效">
  	</Method>
  </Methods>
  <JsFunctions>
  	<JsFunction name="onChangeClient">
/**
 * 值改变时脚本({itemid})
 * 
 * @param  rc 系统提供的AJAX调用对象
 * @param  oldValue 控件改变前的旧值
 * @param  newValue 控件改变后的新值
 */
function {methodName} (rc, oldValue, newValue){
	
}
  	</JsFunction>
  	<JsFunction name="onValidClient">
/**
 * 验证脚本({itemid})
 * 
 * @param  rc 系统提供的AJAX调用对象
 * @param  value 控件的值
 */
function {methodName} (rc, value){
	
}
  	</JsFunction>
  </JsFunctions>
  <JavaFunctions>
		<JavaFunction name="onChangeServer">
<![CDATA[
/**
 * 值改变时脚本
 * 
 * @param item
 *            控件对象
 */
public Object {methodName}(Item item) {
	return null;
}
]]>
		</JavaFunction>
		<JavaFunction name="onValidServer">
<![CDATA[
/**
 * 验证时脚本
 * 
 * @param item
 *            控件对象
 */
public Object {methodName}(Item item) {
	return null;
}
]]>
		</JavaFunction>
		<JavaFunction name="onRootFilter" imports="com.thunisoft.artery.metadata.classCode.ClassCodeTreeNode;">
<![CDATA[
/**
 * 根节点规则 此方法用于回调
 * 
 * @param item
 *            控件对象
 * @param node
 *            分级代码的节点对象
 * @return 当返回值为true时，则表明本node节点为根节点
 */
public boolean {methodName}(Item item, ClassCodeTreeNode node) {
	return true;
}
]]>
		</JavaFunction>
		<JavaFunction name="onFilter" imports="com.thunisoft.artery.metadata.classCode.ClassCodeTreeNode;">
<![CDATA[
/**
 * 过滤规则 此方法用于回调
 * 
 * @param item
 *            控件对象
 * @param node
 *            分级代码的节点对象
 * @return 当返回值为true时，则表明本node节点会过滤掉
 */
public boolean {methodName}(Item item, ClassCodeTreeNode node) {
	return false;
}
]]>
		</JavaFunction>
	</JavaFunctions>
</Item>

